Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
train <- read.csv("trainnormall_2.csv")
test <- read.csv("testnormall_2.csv")
model1 <- glm(Ch1~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred1 <- predict(model1, newdata = train, type = "response")
predtest1 <- predict(model1, newdata = test, type = "response")
model2 <- glm(Ch2~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred2<- predict(model2, newdata = train, type = "response")
predtest2<- predict(model2, newdata = test, type = "response")
model3 <- glm(Ch3~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred3<- predict(model3, newdata = train, type = "response")
predtest3<- predict(model3, newdata = test, type = "response")
model4 <- glm(Ch4~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred4<- predict(model4, newdata = train, type = "response")
predtest4<- predict(model4, newdata = test, type = "response")
pred1 <- as.matrix(pred1)
pred2 <- as.matrix(pred2)
pred3 <- as.matrix(pred3)
pred4 <- as.matrix(pred4)
predtest1 <- as.matrix(predtest1)
predtest2 <- as.matrix(predtest2)
predtest3 <- as.matrix(predtest3)
predtest4 <- as.matrix(predtest4)
pred <- cbind(pred1, pred2)
pred <- cbind(pred, pred3)
pred <- cbind(pred, pred4)
predtest <- cbind(predtest1, predtest2, predtest3, predtest4)
colnames(pred) <- c("pred1","pred2","pred3","pred4")
colnames(predtest) <- c("pred1","pred2","pred3","pred4")
set.seed(8)
train<-train[sample(nrow(train)),]
train <- read.csv("trainnormall_2.csv")
test <- read.csv("testnormall_2.csv")
model1 <- glm(Ch1~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred1 <- predict(model1, newdata = train, type = "response")
predtest1 <- predict(model1, newdata = test, type = "response")
model2 <- glm(Ch2~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred2<- predict(model2, newdata = train, type = "response")
predtest2<- predict(model2, newdata = test, type = "response")
model3 <- glm(Ch3~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred3<- predict(model3, newdata = train, type = "response")
predtest3<- predict(model3, newdata = test, type = "response")
model4 <- glm(Ch4~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred4<- predict(model4, newdata = train, type = "response")
predtest4<- predict(model4, newdata = test, type = "response")
pred1 <- as.matrix(pred1)
pred2 <- as.matrix(pred2)
pred3 <- as.matrix(pred3)
pred4 <- as.matrix(pred4)
predtest1 <- as.matrix(predtest1)
predtest2 <- as.matrix(predtest2)
predtest3 <- as.matrix(predtest3)
predtest4 <- as.matrix(predtest4)
pred <- cbind(pred1, pred2)
pred <- cbind(pred, pred3)
pred <- cbind(pred, pred4)
predtest <- cbind(predtest1, predtest2, predtest3, predtest4)
colnames(pred) <- c("pred1","pred2","pred3","pred4")
colnames(predtest) <- c("pred1","pred2","pred3","pred4")
trainglm<-cbind(train,pred)
set.seed(8)
train<-train[sample(nrow(train)),]
S <- mlogit.data(trainglm,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
folds <- cut(seq(1,nrow(S)),breaks=10,labels=FALSE) #Create 10 equally size folds
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night+car+year,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
M_tot <- mlogit(Choice~CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night+year+car,data=trainData)
summary(M_tot)
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~CC+GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+distance,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+car,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.9*Pcv +0.1*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+car,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 1*Pcv +0*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
M_tot <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=S)
ActualChoice <- train[,"Choice"]
P <- predict(M_tot, newdata = S)
PredMix <- 0.9*P+0.1*pred
PredictedChoice <- apply(PredMix, 1, which.max)
table(PredictedChoice, ActualChoice)
train <- read.csv("trainnormall_2.csv")
test <- read.csv("testnormall_2.csv")
model1 <- glm(Ch1~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred1 <- predict(model1, newdata = train, type = "response")
predtest1 <- predict(model1, newdata = test, type = "response")
model2 <- glm(Ch2~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred2<- predict(model2, newdata = train, type = "response")
predtest2<- predict(model2, newdata = test, type = "response")
model3 <- glm(Ch3~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred3<- predict(model3, newdata = train, type = "response")
predtest3<- predict(model3, newdata = test, type = "response")
model4 <- glm(Ch4~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred4<- predict(model4, newdata = train, type = "response")
predtest4<- predict(model4, newdata = test, type = "response")
pred1 <- as.matrix(pred1)
pred2 <- as.matrix(pred2)
pred3 <- as.matrix(pred3)
pred4 <- as.matrix(pred4)
predtest1 <- as.matrix(predtest1)
predtest2 <- as.matrix(predtest2)
predtest3 <- as.matrix(predtest3)
predtest4 <- as.matrix(predtest4)
pred <- cbind(pred1, pred2)
pred <- cbind(pred, pred3)
pred <- cbind(pred, pred4)
predtest <- cbind(predtest1, predtest2, predtest3, predtest4)
colnames(pred) <- c("pred1","pred2","pred3","pred4")
colnames(predtest) <- c("pred1","pred2","pred3","pred4")
S <- mlogit.data(train,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
M_tot <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=S)
ActualChoice <- train[,"Choice"]
P <- predict(M_tot, newdata = S)
PredMix <- 0.9*P+0.1*pred
PredictedChoice <- apply(PredMix, 1, which.max)
table(PredictedChoice, ActualChoice)
1570+2041+1493+1940
7044/14250
for (i in 1:nrow(test)){
test$Ch1 <-0
test$Ch2 <-1
test$Ch3 <-0
test$Ch4 <-0
test$Choice <- "Ch2"}
T <- mlogit.data(test,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
P2 <- predict(M_tot, newdata = T)
P2Mix <- 0.1*predtest+0.9*P2
P2Mix
submit <- read.csv("samplesubmission.csv")
submit$Ch1 <- P2Mix[,1]
submit$Ch2 <- P2Mix[,2]
submit$Ch3 <- P2Mix[,3]
submit$Ch4 <- P2Mix[,4]
write.csv(submit, "samplesubmission15.csv")
train <- read.csv("trainnormall_2.csv")
test <- read.csv("testnormall_2.csv")
model1 <- glm(Ch1~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred1 <- predict(model1, newdata = train, type = "response")
predtest1 <- predict(model1, newdata = test, type = "response")
model2 <- glm(Ch2~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred2<- predict(model2, newdata = train, type = "response")
predtest2<- predict(model2, newdata = test, type = "response")
model3 <- glm(Ch3~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred3<- predict(model3, newdata = train, type = "response")
predtest3<- predict(model3, newdata = test, type = "response")
model4 <- glm(Ch4~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred4<- predict(model4, newdata = train, type = "response")
predtest4<- predict(model4, newdata = test, type = "response")
pred1 <- as.matrix(pred1)
pred2 <- as.matrix(pred2)
pred3 <- as.matrix(pred3)
pred4 <- as.matrix(pred4)
predtest1 <- as.matrix(predtest1)
predtest2 <- as.matrix(predtest2)
predtest3 <- as.matrix(predtest3)
predtest4 <- as.matrix(predtest4)
pred <- cbind(pred1, pred2)
pred <- cbind(pred, pred3)
pred <- cbind(pred, pred4)
predtest <- cbind(predtest1, predtest2, predtest3, predtest4)
colnames(pred) <- c("pred1","pred2","pred3","pred4")
colnames(predtest) <- c("pred1","pred2","pred3","pred4")
trainglm<-cbind(train,pred)
set.seed(8)
train<-train[sample(nrow(train)),]
M_tot <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=S)
trainglm<-cbind(train,pred)
S <- mlogit.data(trainglm,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
M_tot <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=S)
summary(M_tot)
set.seed(8)
train<-train[sample(nrow(train)),]
S <- mlogit.data(trainglm,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
tot <-0
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.85*Pcv +0.15*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
folds <- cut(seq(1,nrow(S)),breaks=10,labels=FALSE) #Create 10 equally size folds
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.85*Pcv +0.15*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
tot <-0
for(k in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==k,arr.ind=TRUE)
testData <- S[testIndexes, ]
trainData <- S[-testIndexes, ]
Mcv <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=trainData)
Pcv <- as.matrix(predict(Mcv, newdata = testData))
predglm <-subset(testData, testData$Choice==TRUE)[,c("pred1","pred2","pred3","pred4")]
Pmix <- Pcv
Pmix <- 0.95*Pcv +0.05*predglm
ActualChoice <- subset(testData, testData$Choice==TRUE)[,c("Ch1","Ch2","Ch3","Ch4")]
ActualChoice <-as.matrix(ActualChoice)
tot <- tot +(-1*mean(log(Pmix[model.matrix(~ ActualChoice + 0) - Pmix > 0])))
#Use the test and train data partitions however you desire...
}
tot/10
train <- read.csv("trainnormall_2.csv")
test <- read.csv("testnormall_2.csv")
model1 <- glm(Ch1~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred1 <- predict(model1, newdata = train, type = "response")
predtest1 <- predict(model1, newdata = test, type = "response")
model2 <- glm(Ch2~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred2<- predict(model2, newdata = train, type = "response")
predtest2<- predict(model2, newdata = test, type = "response")
model3 <- glm(Ch3~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred3<- predict(model3, newdata = train, type = "response")
predtest3<- predict(model3, newdata = test, type = "response")
model4 <- glm(Ch4~segment+money+year+miles+night+gender+age+educ+region+Urb+ppark, data = train, family = binomial)
pred4<- predict(model4, newdata = train, type = "response")
predtest4<- predict(model4, newdata = test, type = "response")
pred1 <- as.matrix(pred1)
pred2 <- as.matrix(pred2)
pred3 <- as.matrix(pred3)
pred4 <- as.matrix(pred4)
predtest1 <- as.matrix(predtest1)
predtest2 <- as.matrix(predtest2)
predtest3 <- as.matrix(predtest3)
predtest4 <- as.matrix(predtest4)
pred <- cbind(pred1, pred2)
pred <- cbind(pred, pred3)
pred <- cbind(pred, pred4)
predtest <- cbind(predtest1, predtest2, predtest3, predtest4)
colnames(pred) <- c("pred1","pred2","pred3","pred4")
colnames(predtest) <- c("pred1","pred2","pred3","pred4")
M_tot <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=S)
S <- mlogit.data(train,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
M_tot <- mlogit(Choice~GN+NS+BU+FA+LD+BZ+FC+FP+RP+PP+KA+SC+TS+NV+MA+LB+AF+HU+Price+age+gender+educ+money+region+Urb+ppark+night,data=S)
for (i in 1:nrow(test)){
test$Ch1 <-0
test$Ch2 <-1
test$Ch3 <-0
test$Ch4 <-0
test$Choice <- "Ch2"}
T <- mlogit.data(test,shape="wide",choice="Choice",sep="",varying=c(4:83,110:153),alt.levels=c("Ch1","Ch2","Ch3","Ch4"),id.var="Case")
P2 <- predict(M_tot, newdata = T)
P2Mix <- 0.95*P2+0.05*predtest
P2Mix
submit <- read.csv("samplesubmission.csv")
submit$Ch1 <- P2Mix[,1]
submit$Ch2 <- P2Mix[,2]
submit$Ch3 <- P2Mix[,3]
submit$Ch4 <- P2Mix[,4]
write.csv(submit, "samplesubmission16.csv")
P2Mix
